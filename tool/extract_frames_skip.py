import cv2
import os
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from src.abnormal_processing import Image_Processing

def extract_frames(video_path, output_dir, skip_frame=22, prefix=""):
    """
    Tr√≠ch xu·∫•t frame t·ª´ video v√† l∆∞u v√†o th∆∞ m·ª•c output_dir.

    Args:
        video_path (str): ƒê∆∞·ªùng d·∫´n video.
        output_dir (str): Th∆∞ m·ª•c ƒë·ªÉ l∆∞u frame.
        skip_frame (int): S·ªë frame b·ªè qua.
        prefix (str): Ti·ªÅn t·ªë ƒë·ªÉ ph√¢n bi·ªát frame t·ª´ c√°c video kh√°c nhau.
    """
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    cap = cv2.VideoCapture(video_path)
    frame_idx = 0
    saved_idx = 0

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        if frame_idx % (skip_frame + 1) == 0:
            filename = f"{prefix}_frame_{saved_idx:05d}.jpg"
            filepath = os.path.join(output_dir, filename)
            cv2.imwrite(filepath, frame)
            saved_idx += 1

        frame_idx += 1

    cap.release()
    print(f"‚úÖ ƒê√£ tr√≠ch xu·∫•t {saved_idx} frame t·ª´ {os.path.basename(video_path)}")

def process_videos_in_directory(input_dir, output_dir, skip_frame=30, video_extensions=None):
    """
    Duy·ªát c√°c video trong th∆∞ m·ª•c input_dir v√† tr√≠ch xu·∫•t frame v√†o output_dir.

    Args:
        input_dir (str): Th∆∞ m·ª•c ch·ª©a video.
        output_dir (str): Th∆∞ m·ª•c ch·ª©a frame ƒë·∫ßu ra.
        skip_frame (int): S·ªë frame b·ªè qua.
        video_extensions (list): C√°c ƒëu√¥i video h·ª£p l·ªá (m·∫∑c ƒë·ªãnh h·ªó tr·ª£ mp4, avi, mov, mkv).
    """
    if video_extensions is None:
        video_extensions = ['.mp4', '.avi', '.mov', '.mkv']

    os.makedirs(output_dir, exist_ok=True)

    for filename in os.listdir(input_dir):
        filepath = os.path.join(input_dir, filename)
        name, ext = os.path.splitext(filename)
        if os.path.isfile(filepath) and ext.lower() in video_extensions:
            print(f"‚ñ∂Ô∏è ƒêang x·ª≠ l√Ω video: {filename}")
            prefix = name.replace(" ", "_")  # tr√°nh l·ªói t√™n file
            extract_frames(filepath, output_dir, skip_frame, prefix=prefix)

    print("üéâ Ho√†n t·∫•t x·ª≠ l√Ω to√†n b·ªô video.") 
 
def crop_images_in_directory(input_dir, output_dir, processing_fn, image_extensions=None):
    """
    √Åp d·ª•ng m·ªôt h√†m x·ª≠ l√Ω l√™n t·∫•t c·∫£ ·∫£nh trong th∆∞ m·ª•c v√† l∆∞u k·∫øt qu·∫£.

    Args:
        input_dir (str): Th∆∞ m·ª•c ch·ª©a ·∫£nh g·ªëc.
        output_dir (str): Th∆∞ m·ª•c l∆∞u ·∫£nh sau x·ª≠ l√Ω.
        processing_fn (function): H√†m x·ª≠ l√Ω ·∫£nh, nh·∫≠n v√†o ·∫£nh cv2 v√† tr·∫£ v·ªÅ ·∫£nh cv2.
        image_extensions (list): Danh s√°ch ƒëu√¥i file ·∫£nh h·ª£p l·ªá.
    """
    if image_extensions is None:
        image_extensions = ['.jpg', '.jpeg', '.png', '.bmp']

    os.makedirs(output_dir, exist_ok=True)

    for filename in os.listdir(input_dir):
        filepath = os.path.join(input_dir, filename)
        name, ext = os.path.splitext(filename)
        if os.path.isfile(filepath) and ext.lower() in image_extensions:
            img = cv2.imread(filepath)
            if img is None:
                print(f"‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c ·∫£nh: {filename}")
                continue

            processed_img = processing_fn(img)['croped_image']
            if processed_img is not None:     
                output_path = os.path.join(output_dir, filename)
                cv2.imwrite(output_path, processed_img)
                print(f"‚úÖ ƒê√£ x·ª≠ l√Ω: {filename}")

    print("üéâ Ho√†n t·∫•t x·ª≠ l√Ω t·∫•t c·∫£ ·∫£nh.") 
 
    
if __name__ == '__main__':
    # process_videos_in_directory(r"D:\Tu\Old\AI\data\Data_check_bui\DATA_19.05\Videos\OK_Videos_Removed_Dust",r"D:\Tu\Old\AI\data\Data_check_bui\DATA_19.05\Frame_30.05\OK")
    image_process = Image_Processing()
    processing_fn = image_process.detect_lcd
    crop_images_in_directory(r"D:\Tu\Old\AI\data\Data_check_bui\DATA_19.05\Frame_30.05\OK",r"D:\Tu\Old\AI\data\Data_check_bui\DATA_19.05\Train\MY_Crop_30.05\OK",processing_fn)
    
    